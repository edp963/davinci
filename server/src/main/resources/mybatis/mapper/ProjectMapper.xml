<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ <<
  ~  Davinci
  ~  ==
  ~  Copyright (C) 2016 - 2019 EDP
  ~  ==
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~   Unless required by applicable law or agreed to in writing, software
  ~   distributed under the License is distributed on an "AS IS" BASIS,
  ~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~   See the License for the specific language governing permissions and
  ~   limitations under the License.
  ~  >>
  ~
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edp.davinci.dao.ProjectMapper">

    <insert id="insert" parameterType="edp.davinci.model.Project">
        <selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID() AS id
        </selectKey>
        insert project
        <trim prefix="(" suffix=")" suffixOverrides=",">
            `name`,
            <if test="description != null">
                `description`,
            </if>
            <if test='pic != null and pic != "" '>
                `pic`,
            </if>
            `org_id`,
            `user_id`,
            `visibility`,
            `is_transfer`,
            `initial_org_id`
        </trim>
        values
        <trim prefix=" (" suffix=")" suffixOverrides=",">
            #{name, jdbcType=VARCHAR},
            <if test="description != null">
                #{description, jdbcType=VARCHAR},
            </if>
            <if test='pic != null and pic != "" '>
                #{pic, jdbcType=VARCHAR},
            </if>
            #{orgId, jdbcType=BIGINT},
            #{userId, jdbcType=BIGINT},
            #{visibility, jdbcType=TINYINT},
            #{isTransfer, jdbcType=TINYINT},
            #{orgId, jdbcType=BIGINT}
        </trim>
    </insert>


    <sql id="selectProjectByUserBaseSql">
        SELECT p.*,
        IF(s.`id` is NULL, FALSE, TRUE) as 'isStar',
        u.`id` as 'createBy.id',
        IF(u.`name` is NULL, u.`username`, u.`name`) as 'createBy.username',
        u.`avatar` as 'createBy.avatar'
        from project p
        left join `user` u on u.`id` = p.`user_id`
        left join star s on (s.target_id = p.id and s.`target` = 'project' and s.user_id = #{userId})
        where p.id in (
        <!-- 当前用户是project的创建者或管理员 -->
        select DISTINCT p.id
        from project p
        left join rel_project_admin rpa on rpa.project_id = p.id
        where p.user_id = #{userId} or rpa.user_id = #{userId}

        union all

        <!-- 当前用户权限关联的project -->
        select DISTINCT p.id
        from project p
        left join rel_role_project rrp on rrp.project_id = p.id
        left join rel_role_user rru on rru.role_id = rrp.role_id
        where rru.user_id = #{userId}


        union all

        <!--当前用户是project所在org的owner-->
        select DISTINCT p.id
        from project p
        left join rel_user_organization ruo on ruo.org_id = p.org_id
        left join organization o on o.id = p.org_id
        where o.user_id = #{userId}

        union all

        <!--当前org 下project对普通成员可见-->

        select DISTINCT p.id
        from project p
        left join rel_user_organization ruo on ruo.org_id = p.org_id
        left join organization o on o.id = p.org_id
        where ruo.user_id = #{userId} and (ruo.role = 1 or (p.visibility = 1 and o.member_permission = 1))
        )
    </sql>


    <select id="getProjectsByKewordsWithUser" resultType="edp.davinci.dto.projectDto.ProjectWithCreateBy">
        <include refid="selectProjectByUserBaseSql"></include>
        <if test="orgList != null">
            AND p.org_id IN
            <foreach collection="orgList" index="index" item="item" open="(" close=")" separator=",">
                #{item.id}
            </foreach>
        </if>
        <if test="keywords != null">
            AND LOWER(p.`name`) LIKE CONCAT(CONCAT('%', LOWER(#{keywords})), '%')
        </if>
        ORDER BY p.id
    </select>


    <select id="getProjectsByOrgWithUser" resultType="edp.davinci.dto.projectDto.ProjectWithCreateBy">
        <include refid="selectProjectByUserBaseSql"></include>
        <if test="orgId != null">
            and p.org_id = #{orgId}
        </if>
        <if test="keyword != null">
            AND LOWER(p.`name`) LIKE CONCAT(CONCAT('%', LOWER(#{keyword})), '%')
        </if>
        ORDER BY p.id
    </select>


    <select id="getProejctsByUser" resultType="edp.davinci.dto.projectDto.ProjectWithCreateBy">
        <include refid="selectProjectByUserBaseSql"></include>
        order by p.id
    </select>


    <select id="getFavoriteProjects" resultType="edp.davinci.dto.projectDto.ProjectWithCreateBy">
        select t.* from (
        <include refid="selectProjectByUserBaseSql"></include>
        ) t LEFT JOIN favorite f on t.id = f.project_id
        where f.user_id = #{userId}
        order by t.id
    </select>


    <select id="getProjectIdsByAdmin" resultType="java.lang.Long">
      select p.id
      from project p
             left join rel_project_admin rpa on rpa.project_id = p.id
      where p.user_id = #{userId}
         or rpa.user_id = #{userId}
      union
      select p.id
      from project p
             left join rel_user_organization ruo on ruo.org_id = p.org_id
             left join organization o on o.id = p.org_id
      where o.user_id = #{userId}
         or (ruo.user_id = #{userId} and ruo.role > 0)
  </select>

    <select id="getProjectDetail" resultType="edp.davinci.dto.projectDto.ProjectDetail">
      SELECT p.*,
             u.`id`                                       AS 'createBy.id',
             IF(u.`name` is NULL, u.`username`, u.`name`) AS 'createBy.username',
             u.`avatar`                                   AS 'createBy.avatar',
             o.`id`                                       AS 'organization.id',
             o.`name`                                     AS 'organization.name',
             o.`description`                              AS 'organization.description',
             o.`avatar`                                   AS 'organization.avatar',
             o.`user_id`                                  AS 'organization.userId',
             o.`project_num`                              AS 'organization.projectNum',
             o.`member_num`                               AS 'organization.memberNum',
             o.`role_num`                                 AS 'organization.teamNum',
             o.`allow_create_project`                     AS 'organization.allowCreateProject',
             o.`member_permission`                        AS 'organization.memberPermission',
             o.`create_time`                              AS 'organization.createTime',
             o.`create_by`                                AS 'organization.createBy',
             o.`update_time`                              AS 'organization.updateTime',
             o.`update_by`                                AS 'organization.updateBy'
      FROM project p
             LEFT JOIN organization o on o.`id` = p.`org_id`
             LEFT JOIN `user` u on u.`id` = p.`user_id`
      WHERE p.`id` = #{id}
  </select>

</mapper>